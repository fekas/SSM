<?xml version="1.0" encoding="UTF-8"?>
<web-app id="WebApp_ID" version="2.4" xmlns="http://java.sun.com/xml/ns/j2ee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://java.sun.com/xml/ns/j2ee http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd">
	<display-name>SpringMVC_HelloWoeld</display-name>
	<welcome-file-list>
		<welcome-file>index.html</welcome-file>
		<welcome-file>index.htm</welcome-file>
		<welcome-file>index.jsp</welcome-file>
		<welcome-file>default.html</welcome-file>
		<welcome-file>default.htm</welcome-file>
		<welcome-file>default.jsp</welcome-file>
	</welcome-file-list>
	
	<!-- SpringMVC思想是一个前端控制器(DispatcherServlet)拦截所有请求，智能派发
		这个拦截器是一个servlet，应该在web.xml文件中配置 -->
	<!-- The front controller of this Spring Web application, 
	responsible for handling all application requests -->
	<servlet>
		<servlet-name>springDispatcherServlet</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<init-param>
			<!-- 指定SpringMVC配置文件位置，
			如果不指定配置文件位置(删除下面两行)，也会去找 /WEB-INF/${servlet-name}-servlet.xml
			可在WEB-INF下创建“前端控制器名-servlet.xml”的文件-->
			<param-name>contextConfigLocation</param-name>
			<param-value>classpath:spring_mvc.xml</param-value>
		</init-param>
		<!-- servlet启动时加载创建对象，值越小优先级越高 -->
		<load-on-startup>1</load-on-startup>
	</servlet>

	<!-- Map all requests to the DispatcherServlet for handling -->
	<servlet-mapping>
		<servlet-name>springDispatcherServlet</servlet-name>
		<!-- 
		/		拦截所有请求，但不会拦截jsp请求
		/*		拦截所有请求，也会拦截jsp请求
		
		DefaultServlet是tomcat处理静态资源的，除了jsp和servlet以外其他均为静态资源
		
		原因：在服务器中的web.xml中有一个DefaultServlet的url-pattern=/
			我们的前端控制器的url-pattern也是"/",相当于子xml重写了tomcat中的DefaultServlet
			前端控制器会拦截获取静态资源的请求并在servlet中寻找处理方法，所以静态资源(比如.html文件)不能访问
			.jsp能访问的原因：web.xml中有一个JspServlet的url-pattern=*.jsp，前端控制器的url-pattern=/
			所以子xml中没有重写JspServlet，若前端控制器的url-pattern=/*则jsp页面也会被拦截
		 -->
		<url-pattern>/</url-pattern>
	</servlet-mapping>
</web-app>
